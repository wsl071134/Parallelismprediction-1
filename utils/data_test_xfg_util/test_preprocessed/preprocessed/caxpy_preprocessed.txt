define void @caxpy_(i64* nocapture readonly %n, i64* %ca, i64* nocapture readonly %cx, i64* nocapture readonly %incx, i64* nocapture %cy, i64* nocapture readonly %incy) local_unnamed_addr
L.entry:
%0 = bitcast i64* %n to i32*
%cy43 = ptrtoint i64* %cy to i64
%cy41 = bitcast i64* %cy to i8*
%1 = load i32, i32* %0, align 4
%2 = icmp slt i32 %1, 1
br i1 %2, label %L.LB1_310, label %L.LB1_351
L.LB1_351:                                        ; preds = %L.entry
%3 = bitcast i64* %ca to i8*
%4 = tail call float (i8*, ...) bitcast (float (...)* @scabs1_ to float (i8*, ...)*)(i8* %3)
%5 = fcmp oeq float %4, 0.000000e+00
br i1 %5, label %L.LB1_310, label %L.LB1_352
L.LB1_352:                                        ; preds = %L.LB1_351
%6 = bitcast i64* %incx to i32*
%7 = load i32, i32* %6, align 4
%8 = icmp eq i32 %7, 1
br i1 %8, label %L.LB1_353, label %L.LB1_317
L.LB1_353:                                        ; preds = %L.LB1_352
%9 = bitcast i64* %incy to i32*
%10 = load i32, i32* %9, align 4
%11 = icmp eq i32 %10, 1
br i1 %11, label %L.LB1_354, label %L.LB1_322thread-pre-split
L.LB1_354:                                        ; preds = %L.LB1_353
%12 = load i32, i32* %0, align 4
%13 = icmp slt i32 %12, 1
br i1 %13, label %L.LB1_310, label %L.LB1_318.preheader
L.LB1_318.preheader:                              ; preds = %L.LB1_354
%14 = bitcast i64* %ca to <{ float, float }>*
%.elt = bitcast i64* %ca to float*
%.unpack = load float, float* %.elt, align 1
%.elt2 = getelementptr inbounds <{ float, float }>, <{ float, float }>* %14, i64 0, i32 1
%.unpack3 = load float, float* %.elt2, align 1
%15 = getelementptr i64, i64* %cx, i64 -1
%16 = getelementptr i64, i64* %cy, i64 -1
%17 = xor i32 %12, -1
%18 = icmp sgt i32 %17, -2
%smax = select i1 %18, i32 %17, i32 -2
%19 = add i32 %12, %smax
%20 = add i32 %19, 1
%21 = zext i32 %20 to i64
%22 = add nuw nsw i64 %21, 1
%min.iters.check = icmp ult i64 %22, 4
br i1 %min.iters.check, label %L.LB1_318.preheader61, label %vector.scevcheck
vector.scevcheck:                                 ; preds = %L.LB1_318.preheader
%23 = xor i32 %12, -1
%24 = icmp sgt i32 %23, -2
%smax40 = select i1 %24, i32 %23, i32 -2
%25 = add i32 %12, %smax40
%26 = add i32 %25, 1
%uglygep = getelementptr i8, i8* %cy41, i64 4
%uglygep42 = ptrtoint i8* %uglygep to i64
%27 = zext i32 %26 to i64
%mul = shl nuw nsw i64 %27, 3
%28 = add i64 %mul, %uglygep42
%29 = icmp ult i64 %28, %uglygep42
%30 = zext i32 %26 to i64
%mul44 = shl nuw nsw i64 %30, 3
%31 = add i64 %mul44, %cy43
%32 = icmp ult i64 %31, %cy43
%33 = or i1 %29, %32
br i1 %33, label %L.LB1_318.preheader61, label %vector.ph
vector.ph:                                        ; preds = %vector.scevcheck
%34 = add i32 %19, 2
%35 = and i32 %34, 3
%n.mod.vf = zext i32 %35 to i64
%n.vec = sub nsw i64 %22, %n.mod.vf
%ind.end = add nsw i64 %n.vec, 1
%cast.crd = trunc i64 %n.vec to i32
%ind.end48 = sub i32 %12, %cast.crd
%broadcast.splatinsert54 = insertelement <4 x float> undef, float %.unpack, i32 0
%broadcast.splat55 = shufflevector <4 x float> %broadcast.splatinsert54, <4 x float> undef, <4 x i32> zeroinitializer
%broadcast.splatinsert56 = insertelement <4 x float> undef, float %.unpack3, i32 0
%broadcast.splat57 = shufflevector <4 x float> %broadcast.splatinsert56, <4 x float> undef, <4 x i32> zeroinitializer
br label %vector.body
vector.body:                                      ; preds = %vector.body, %vector.ph
%index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
%offset.idx = or i64 %index, 1
%36 = getelementptr i64, i64* %15, i64 %offset.idx
%37 = bitcast i64* %36 to <8 x float>*
%wide.vec = load <8 x float>, <8 x float>* %37, align 1
%strided.vec = shufflevector <8 x float> %wide.vec, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
%strided.vec53 = shufflevector <8 x float> %wide.vec, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
%38 = fmul <4 x float> %broadcast.splat55, %strided.vec
%39 = fmul <4 x float> %broadcast.splat55, %strided.vec53
%40 = fmul <4 x float> %broadcast.splat57, %strided.vec
%41 = fmul <4 x float> %broadcast.splat57, %strided.vec53
%42 = fsub <4 x float> %38, %41
%43 = fadd <4 x float> %40, %39
%44 = getelementptr i64, i64* %16, i64 %offset.idx
%45 = bitcast i64* %44 to <{ float, float }>*
%46 = bitcast i64* %44 to <8 x float>*
%wide.vec58 = load <8 x float>, <8 x float>* %46, align 1
%strided.vec59 = shufflevector <8 x float> %wide.vec58, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
%strided.vec60 = shufflevector <8 x float> %wide.vec58, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
%47 = getelementptr inbounds <{ float, float }>, <{ float, float }>* %45, i64 0, i32 1
%48 = fadd <4 x float> %strided.vec59, %42
%49 = fadd <4 x float> %43, %strided.vec60
%50 = getelementptr float, float* %47, i64 -1
%51 = bitcast float* %50 to <8 x float>*
%interleaved.vec = shufflevector <4 x float> %48, <4 x float> %49, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
store <8 x float> %interleaved.vec, <8 x float>* %51, align 4
%index.next = add i64 %index, 4
%52 = icmp eq i64 %index.next, %n.vec
br i1 %52, label %middle.block, label %vector.body
middle.block:                                     ; preds = %vector.body
%cmp.n = icmp eq i32 %35, 0
br i1 %cmp.n, label %L.LB1_310, label %L.LB1_318.preheader61
L.LB1_318.preheader61:                            ; preds = %middle.block, %vector.scevcheck, %L.LB1_318.preheader
%indvars.iv.ph = phi i64 [ 1, %vector.scevcheck ], [ 1, %L.LB1_318.preheader ], [ %ind.end, %middle.block ]
%.dY0001_320.0.ph = phi i32 [ %12, %vector.scevcheck ], [ %12, %L.LB1_318.preheader ], [ %ind.end48, %middle.block ]
br label %L.LB1_318
L.LB1_318:                                        ; preds = %L.LB1_318.preheader61, %L.LB1_318
%indvars.iv = phi i64 [ %indvars.iv.next, %L.LB1_318 ], [ %indvars.iv.ph, %L.LB1_318.preheader61 ]
%.dY0001_320.0 = phi i32 [ %65, %L.LB1_318 ], [ %.dY0001_320.0.ph, %L.LB1_318.preheader61 ]
%53 = getelementptr i64, i64* %15, i64 %indvars.iv
%54 = bitcast i64* %53 to <{ float, float }>*
%.elt4 = bitcast i64* %53 to float*
%.unpack5 = load float, float* %.elt4, align 1
%.elt6 = getelementptr inbounds <{ float, float }>, <{ float, float }>* %54, i64 0, i32 1
%.unpack7 = load float, float* %.elt6, align 1
%55 = fmul float %.unpack, %.unpack5
%56 = fmul float %.unpack, %.unpack7
%57 = fmul float %.unpack3, %.unpack5
%58 = fmul float %.unpack3, %.unpack7
%59 = fsub float %55, %58
%60 = fadd float %57, %56
%61 = getelementptr i64, i64* %16, i64 %indvars.iv
%62 = bitcast i64* %61 to <{ float, float }>*
%.elt8 = bitcast i64* %61 to float*
%.unpack9 = load float, float* %.elt8, align 1
%.elt10 = getelementptr inbounds <{ float, float }>, <{ float, float }>* %62, i64 0, i32 1
%.unpack11 = load float, float* %.elt10, align 1
%63 = fadd float %.unpack9, %59
%64 = fadd float %60, %.unpack11
store float %63, float* %.elt8, align 4
store float %64, float* %.elt10, align 4
%indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
%65 = add nsw i32 %.dY0001_320.0, -1
%66 = icmp sgt i32 %.dY0001_320.0, 1
br i1 %66, label %L.LB1_318, label %L.LB1_310
L.LB1_317:                                        ; preds = %L.LB1_352
%67 = icmp sgt i32 %7, -1
br i1 %67, label %L.LB1_322thread-pre-split, label %L.LB1_355
L.LB1_355:                                        ; preds = %L.LB1_317
%68 = load i32, i32* %0, align 4
%69 = sub nsw i32 1, %68
%70 = mul nsw i32 %69, %7
%71 = add nsw i32 %70, 1
%phitmp = sext i32 %71 to i64
br label %L.LB1_322
L.LB1_322thread-pre-split:                        ; preds = %L.LB1_317, %L.LB1_353
%.pr.pr = load i32, i32* %0, align 4
br label %L.LB1_322
L.LB1_322:                                        ; preds = %L.LB1_322thread-pre-split, %L.LB1_355
%.pr = phi i32 [ %.pr.pr, %L.LB1_322thread-pre-split ], [ %68, %L.LB1_355 ]
%ix_307.0 = phi i64 [ 1, %L.LB1_322thread-pre-split ], [ %phitmp, %L.LB1_355 ]
%72 = bitcast i64* %incy to i32*
%73 = load i32, i32* %72, align 4
%74 = icmp sgt i32 %73, -1
br i1 %74, label %L.LB1_323, label %L.LB1_356
L.LB1_356:                                        ; preds = %L.LB1_322
%75 = sub nsw i32 1, %.pr
%76 = mul nsw i32 %75, %73
%77 = add nsw i32 %76, 1
%phitmp37 = sext i32 %77 to i64
br label %L.LB1_323
L.LB1_323:                                        ; preds = %L.LB1_322, %L.LB1_356
%iy_308.0 = phi i64 [ %phitmp37, %L.LB1_356 ], [ 1, %L.LB1_322 ]
%78 = icmp slt i32 %.pr, 1
br i1 %78, label %L.LB1_310, label %L.LB1_324.preheader
L.LB1_324.preheader:                              ; preds = %L.LB1_323
%79 = bitcast i64* %ca to <{ float, float }>*
%.elt15 = bitcast i64* %ca to float*
%.unpack16 = load float, float* %.elt15, align 1
%.elt17 = getelementptr inbounds <{ float, float }>, <{ float, float }>* %79, i64 0, i32 1
%.unpack18 = load float, float* %.elt17, align 1
%80 = getelementptr i64, i64* %cx, i64 -1
%81 = getelementptr i64, i64* %cy, i64 -1
%82 = sext i32 %7 to i64
%83 = sext i32 %73 to i64
br label %L.LB1_324
L.LB1_324:                                        ; preds = %L.LB1_324.preheader, %L.LB1_324
%indvars.iv35 = phi i64 [ %iy_308.0, %L.LB1_324.preheader ], [ %indvars.iv.next36, %L.LB1_324 ]
%indvars.iv33 = phi i64 [ %ix_307.0, %L.LB1_324.preheader ], [ %indvars.iv.next34, %L.LB1_324 ]
%.dY0002_326.0 = phi i32 [ %.pr, %L.LB1_324.preheader ], [ %96, %L.LB1_324 ]
%84 = getelementptr i64, i64* %80, i64 %indvars.iv33
%85 = bitcast i64* %84 to <{ float, float }>*
%.elt19 = bitcast i64* %84 to float*
%.unpack20 = load float, float* %.elt19, align 1
%.elt21 = getelementptr inbounds <{ float, float }>, <{ float, float }>* %85, i64 0, i32 1
%.unpack22 = load float, float* %.elt21, align 1
%86 = fmul float %.unpack16, %.unpack20
%87 = fmul float %.unpack16, %.unpack22
%88 = fmul float %.unpack18, %.unpack20
%89 = fmul float %.unpack18, %.unpack22
%90 = fsub float %86, %89
%91 = fadd float %88, %87
%92 = getelementptr i64, i64* %81, i64 %indvars.iv35
%93 = bitcast i64* %92 to <{ float, float }>*
%.elt23 = bitcast i64* %92 to float*
%.unpack24 = load float, float* %.elt23, align 1
%.elt25 = getelementptr inbounds <{ float, float }>, <{ float, float }>* %93, i64 0, i32 1
%.unpack26 = load float, float* %.elt25, align 1
%94 = fadd float %.unpack24, %90
%95 = fadd float %91, %.unpack26
store float %94, float* %.elt23, align 4
store float %95, float* %.elt25, align 4
%indvars.iv.next34 = add i64 %indvars.iv33, %82
%indvars.iv.next36 = add i64 %indvars.iv35, %83
%96 = add nsw i32 %.dY0002_326.0, -1
%97 = icmp sgt i32 %.dY0002_326.0, 1
br i1 %97, label %L.LB1_324, label %L.LB1_310
L.LB1_310:                                        ; preds = %L.LB1_324, %L.LB1_318, %middle.block, %L.LB1_354, %L.LB1_323, %L.LB1_351, %L.entry
ret void
